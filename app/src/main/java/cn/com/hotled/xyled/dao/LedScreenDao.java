package cn.com.hotled.xyled.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.hotled.xyled.bean.LedScreen;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LED_SCREEN".
*/
public class LedScreenDao extends AbstractDao<LedScreen, Long> {

    public static final String TABLENAME = "LED_SCREEN";

    /**
     * Properties of entity LedScreen.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property ScreenName = new Property(1, String.class, "screenName", false, "SCREEN_NAME");
        public final static Property Width = new Property(2, int.class, "width", false, "WIDTH");
        public final static Property Height = new Property(3, int.class, "height", false, "HEIGHT");
        public final static Property CardName = new Property(4, String.class, "cardName", false, "CARD_NAME");
        public final static Property Location = new Property(5, String.class, "location", false, "LOCATION");
    }

    private DaoSession daoSession;


    public LedScreenDao(DaoConfig config) {
        super(config);
    }
    
    public LedScreenDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LED_SCREEN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"SCREEN_NAME\" TEXT," + // 1: screenName
                "\"WIDTH\" INTEGER NOT NULL ," + // 2: width
                "\"HEIGHT\" INTEGER NOT NULL ," + // 3: height
                "\"CARD_NAME\" TEXT," + // 4: cardName
                "\"LOCATION\" TEXT);"); // 5: location
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LED_SCREEN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LedScreen entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String screenName = entity.getScreenName();
        if (screenName != null) {
            stmt.bindString(2, screenName);
        }
        stmt.bindLong(3, entity.getWidth());
        stmt.bindLong(4, entity.getHeight());
 
        String cardName = entity.getCardName();
        if (cardName != null) {
            stmt.bindString(5, cardName);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(6, location);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LedScreen entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String screenName = entity.getScreenName();
        if (screenName != null) {
            stmt.bindString(2, screenName);
        }
        stmt.bindLong(3, entity.getWidth());
        stmt.bindLong(4, entity.getHeight());
 
        String cardName = entity.getCardName();
        if (cardName != null) {
            stmt.bindString(5, cardName);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(6, location);
        }
    }

    @Override
    protected final void attachEntity(LedScreen entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public LedScreen readEntity(Cursor cursor, int offset) {
        LedScreen entity = new LedScreen( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // screenName
            cursor.getInt(offset + 2), // width
            cursor.getInt(offset + 3), // height
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cardName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // location
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LedScreen entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setScreenName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWidth(cursor.getInt(offset + 2));
        entity.setHeight(cursor.getInt(offset + 3));
        entity.setCardName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLocation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LedScreen entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LedScreen entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LedScreen entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
