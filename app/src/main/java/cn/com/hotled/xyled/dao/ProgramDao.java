package cn.com.hotled.xyled.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.hotled.xyled.bean.FileConverter;
import cn.com.hotled.xyled.bean.ProgramType;
import cn.com.hotled.xyled.bean.ProgramTypeConverter;
import cn.com.hotled.xyled.bean.TextContent;
import java.io.File;

import cn.com.hotled.xyled.bean.Program;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROGRAM".
*/
public class ProgramDao extends AbstractDao<Program, Long> {

    public static final String TABLENAME = "PROGRAM";

    /**
     * Properties of entity Program.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property SortNumber = new Property(1, int.class, "sortNumber", false, "SORT_NUMBER");
        public final static Property ProgramName = new Property(2, String.class, "programName", false, "PROGRAM_NAME");
        public final static Property BaseX = new Property(3, int.class, "baseX", false, "BASE_X");
        public final static Property BaseY = new Property(4, int.class, "baseY", false, "BASE_Y");
        public final static Property FrameTime = new Property(5, float.class, "frameTime", false, "FRAME_TIME");
        public final static Property StayTime = new Property(6, float.class, "stayTime", false, "STAY_TIME");
        public final static Property FlowBoundFile = new Property(7, String.class, "flowBoundFile", false, "FLOW_BOUND_FILE");
        public final static Property FlowEffect = new Property(8, int.class, "flowEffect", false, "FLOW_EFFECT");
        public final static Property FlowSpeed = new Property(9, int.class, "flowSpeed", false, "FLOW_SPEED");
        public final static Property UseFlowBound = new Property(10, boolean.class, "useFlowBound", false, "USE_FLOW_BOUND");
        public final static Property ProgramType = new Property(11, String.class, "programType", false, "PROGRAM_TYPE");
        public final static Property PicFile = new Property(12, String.class, "picFile", false, "PIC_FILE");
        public final static Property MTextContent = new Property(13, Long.class, "mTextContent", false, "M_TEXT_CONTENT");
    }

    private DaoSession daoSession;

    private final FileConverter flowBoundFileConverter = new FileConverter();
    private final ProgramTypeConverter programTypeConverter = new ProgramTypeConverter();
    private final FileConverter picFileConverter = new FileConverter();

    public ProgramDao(DaoConfig config) {
        super(config);
    }
    
    public ProgramDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROGRAM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"SORT_NUMBER\" INTEGER NOT NULL ," + // 1: sortNumber
                "\"PROGRAM_NAME\" TEXT," + // 2: programName
                "\"BASE_X\" INTEGER NOT NULL ," + // 3: baseX
                "\"BASE_Y\" INTEGER NOT NULL ," + // 4: baseY
                "\"FRAME_TIME\" REAL NOT NULL ," + // 5: frameTime
                "\"STAY_TIME\" REAL NOT NULL ," + // 6: stayTime
                "\"FLOW_BOUND_FILE\" TEXT," + // 7: flowBoundFile
                "\"FLOW_EFFECT\" INTEGER NOT NULL ," + // 8: flowEffect
                "\"FLOW_SPEED\" INTEGER NOT NULL ," + // 9: flowSpeed
                "\"USE_FLOW_BOUND\" INTEGER NOT NULL ," + // 10: useFlowBound
                "\"PROGRAM_TYPE\" TEXT," + // 11: programType
                "\"PIC_FILE\" TEXT," + // 12: picFile
                "\"M_TEXT_CONTENT\" INTEGER);"); // 13: mTextContent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROGRAM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Program entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getSortNumber());
 
        String programName = entity.getProgramName();
        if (programName != null) {
            stmt.bindString(3, programName);
        }
        stmt.bindLong(4, entity.getBaseX());
        stmt.bindLong(5, entity.getBaseY());
        stmt.bindDouble(6, entity.getFrameTime());
        stmt.bindDouble(7, entity.getStayTime());
 
        File flowBoundFile = entity.getFlowBoundFile();
        if (flowBoundFile != null) {
            stmt.bindString(8, flowBoundFileConverter.convertToDatabaseValue(flowBoundFile));
        }
        stmt.bindLong(9, entity.getFlowEffect());
        stmt.bindLong(10, entity.getFlowSpeed());
        stmt.bindLong(11, entity.getUseFlowBound() ? 1L: 0L);
 
        ProgramType programType = entity.getProgramType();
        if (programType != null) {
            stmt.bindString(12, programTypeConverter.convertToDatabaseValue(programType));
        }
 
        File picFile = entity.getPicFile();
        if (picFile != null) {
            stmt.bindString(13, picFileConverter.convertToDatabaseValue(picFile));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Program entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getSortNumber());
 
        String programName = entity.getProgramName();
        if (programName != null) {
            stmt.bindString(3, programName);
        }
        stmt.bindLong(4, entity.getBaseX());
        stmt.bindLong(5, entity.getBaseY());
        stmt.bindDouble(6, entity.getFrameTime());
        stmt.bindDouble(7, entity.getStayTime());
 
        File flowBoundFile = entity.getFlowBoundFile();
        if (flowBoundFile != null) {
            stmt.bindString(8, flowBoundFileConverter.convertToDatabaseValue(flowBoundFile));
        }
        stmt.bindLong(9, entity.getFlowEffect());
        stmt.bindLong(10, entity.getFlowSpeed());
        stmt.bindLong(11, entity.getUseFlowBound() ? 1L: 0L);
 
        ProgramType programType = entity.getProgramType();
        if (programType != null) {
            stmt.bindString(12, programTypeConverter.convertToDatabaseValue(programType));
        }
 
        File picFile = entity.getPicFile();
        if (picFile != null) {
            stmt.bindString(13, picFileConverter.convertToDatabaseValue(picFile));
        }
    }

    @Override
    protected final void attachEntity(Program entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Program readEntity(Cursor cursor, int offset) {
        Program entity = new Program( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // sortNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // programName
            cursor.getInt(offset + 3), // baseX
            cursor.getInt(offset + 4), // baseY
            cursor.getFloat(offset + 5), // frameTime
            cursor.getFloat(offset + 6), // stayTime
            cursor.isNull(offset + 7) ? null : flowBoundFileConverter.convertToEntityProperty(cursor.getString(offset + 7)), // flowBoundFile
            cursor.getInt(offset + 8), // flowEffect
            cursor.getInt(offset + 9), // flowSpeed
            cursor.getShort(offset + 10) != 0, // useFlowBound
            cursor.isNull(offset + 11) ? null : programTypeConverter.convertToEntityProperty(cursor.getString(offset + 11)), // programType
            cursor.isNull(offset + 12) ? null : picFileConverter.convertToEntityProperty(cursor.getString(offset + 12)) // picFile
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Program entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setSortNumber(cursor.getInt(offset + 1));
        entity.setProgramName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBaseX(cursor.getInt(offset + 3));
        entity.setBaseY(cursor.getInt(offset + 4));
        entity.setFrameTime(cursor.getFloat(offset + 5));
        entity.setStayTime(cursor.getFloat(offset + 6));
        entity.setFlowBoundFile(cursor.isNull(offset + 7) ? null : flowBoundFileConverter.convertToEntityProperty(cursor.getString(offset + 7)));
        entity.setFlowEffect(cursor.getInt(offset + 8));
        entity.setFlowSpeed(cursor.getInt(offset + 9));
        entity.setUseFlowBound(cursor.getShort(offset + 10) != 0);
        entity.setProgramType(cursor.isNull(offset + 11) ? null : programTypeConverter.convertToEntityProperty(cursor.getString(offset + 11)));
        entity.setPicFile(cursor.isNull(offset + 12) ? null : picFileConverter.convertToEntityProperty(cursor.getString(offset + 12)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Program entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Program entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Program entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTextContentDao().getAllColumns());
            builder.append(" FROM PROGRAM T");
            builder.append(" LEFT JOIN TEXT_CONTENT T0 ON T.\"M_TEXT_CONTENT\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Program loadCurrentDeep(Cursor cursor, boolean lock) {
        Program entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        TextContent mTextContent = loadCurrentOther(daoSession.getTextContentDao(), cursor, offset);
        entity.setMTextContent(mTextContent);

        return entity;    
    }

    public Program loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Program> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Program> list = new ArrayList<Program>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Program> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Program> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
