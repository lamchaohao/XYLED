package cn.com.hotled.xyled.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import cn.com.hotled.xyled.bean.FileConverter;
import cn.com.hotled.xyled.bean.ProgramType;
import cn.com.hotled.xyled.bean.ProgramTypeConverter;
import java.io.File;

import cn.com.hotled.xyled.bean.Program;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROGRAM".
*/
public class ProgramDao extends AbstractDao<Program, Long> {

    public static final String TABLENAME = "PROGRAM";

    /**
     * Properties of entity Program.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property SortNumber = new Property(1, int.class, "sortNumber", false, "SORT_NUMBER");
        public final static Property ScreenId = new Property(2, long.class, "screenId", false, "SCREEN_ID");
        public final static Property ProgramName = new Property(3, String.class, "programName", false, "PROGRAM_NAME");
        public final static Property BaseX = new Property(4, int.class, "baseX", false, "BASE_X");
        public final static Property BaseY = new Property(5, int.class, "baseY", false, "BASE_Y");
        public final static Property FrameTime = new Property(6, float.class, "frameTime", false, "FRAME_TIME");
        public final static Property StayTime = new Property(7, float.class, "stayTime", false, "STAY_TIME");
        public final static Property ProgramType = new Property(8, String.class, "programType", false, "PROGRAM_TYPE");
        public final static Property PicFile = new Property(9, String.class, "picFile", false, "PIC_FILE");
    }

    private DaoSession daoSession;

    private final ProgramTypeConverter programTypeConverter = new ProgramTypeConverter();
    private final FileConverter picFileConverter = new FileConverter();
    private Query<Program> ledScreen_ProgramListQuery;

    public ProgramDao(DaoConfig config) {
        super(config);
    }
    
    public ProgramDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROGRAM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"SORT_NUMBER\" INTEGER NOT NULL ," + // 1: sortNumber
                "\"SCREEN_ID\" INTEGER NOT NULL ," + // 2: screenId
                "\"PROGRAM_NAME\" TEXT," + // 3: programName
                "\"BASE_X\" INTEGER NOT NULL ," + // 4: baseX
                "\"BASE_Y\" INTEGER NOT NULL ," + // 5: baseY
                "\"FRAME_TIME\" REAL NOT NULL ," + // 6: frameTime
                "\"STAY_TIME\" REAL NOT NULL ," + // 7: stayTime
                "\"PROGRAM_TYPE\" TEXT," + // 8: programType
                "\"PIC_FILE\" TEXT);"); // 9: picFile
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROGRAM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Program entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getSortNumber());
        stmt.bindLong(3, entity.getScreenId());
 
        String programName = entity.getProgramName();
        if (programName != null) {
            stmt.bindString(4, programName);
        }
        stmt.bindLong(5, entity.getBaseX());
        stmt.bindLong(6, entity.getBaseY());
        stmt.bindDouble(7, entity.getFrameTime());
        stmt.bindDouble(8, entity.getStayTime());
 
        ProgramType programType = entity.getProgramType();
        if (programType != null) {
            stmt.bindString(9, programTypeConverter.convertToDatabaseValue(programType));
        }
 
        File picFile = entity.getPicFile();
        if (picFile != null) {
            stmt.bindString(10, picFileConverter.convertToDatabaseValue(picFile));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Program entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getSortNumber());
        stmt.bindLong(3, entity.getScreenId());
 
        String programName = entity.getProgramName();
        if (programName != null) {
            stmt.bindString(4, programName);
        }
        stmt.bindLong(5, entity.getBaseX());
        stmt.bindLong(6, entity.getBaseY());
        stmt.bindDouble(7, entity.getFrameTime());
        stmt.bindDouble(8, entity.getStayTime());
 
        ProgramType programType = entity.getProgramType();
        if (programType != null) {
            stmt.bindString(9, programTypeConverter.convertToDatabaseValue(programType));
        }
 
        File picFile = entity.getPicFile();
        if (picFile != null) {
            stmt.bindString(10, picFileConverter.convertToDatabaseValue(picFile));
        }
    }

    @Override
    protected final void attachEntity(Program entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Program readEntity(Cursor cursor, int offset) {
        Program entity = new Program( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // sortNumber
            cursor.getLong(offset + 2), // screenId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // programName
            cursor.getInt(offset + 4), // baseX
            cursor.getInt(offset + 5), // baseY
            cursor.getFloat(offset + 6), // frameTime
            cursor.getFloat(offset + 7), // stayTime
            cursor.isNull(offset + 8) ? null : programTypeConverter.convertToEntityProperty(cursor.getString(offset + 8)), // programType
            cursor.isNull(offset + 9) ? null : picFileConverter.convertToEntityProperty(cursor.getString(offset + 9)) // picFile
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Program entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setSortNumber(cursor.getInt(offset + 1));
        entity.setScreenId(cursor.getLong(offset + 2));
        entity.setProgramName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBaseX(cursor.getInt(offset + 4));
        entity.setBaseY(cursor.getInt(offset + 5));
        entity.setFrameTime(cursor.getFloat(offset + 6));
        entity.setStayTime(cursor.getFloat(offset + 7));
        entity.setProgramType(cursor.isNull(offset + 8) ? null : programTypeConverter.convertToEntityProperty(cursor.getString(offset + 8)));
        entity.setPicFile(cursor.isNull(offset + 9) ? null : picFileConverter.convertToEntityProperty(cursor.getString(offset + 9)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Program entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Program entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Program entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "programList" to-many relationship of LedScreen. */
    public List<Program> _queryLedScreen_ProgramList(long screenId) {
        synchronized (this) {
            if (ledScreen_ProgramListQuery == null) {
                QueryBuilder<Program> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ScreenId.eq(null));
                ledScreen_ProgramListQuery = queryBuilder.build();
            }
        }
        Query<Program> query = ledScreen_ProgramListQuery.forCurrentThread();
        query.setParameter(0, screenId);
        return query.list();
    }

}
