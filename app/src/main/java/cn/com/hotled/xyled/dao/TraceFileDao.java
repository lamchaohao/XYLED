package cn.com.hotled.xyled.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.hotled.xyled.bean.FileConverter;
import java.io.File;

import cn.com.hotled.xyled.bean.TraceFile;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRACE_FILE".
*/
public class TraceFileDao extends AbstractDao<TraceFile, Long> {

    public static final String TABLENAME = "TRACE_FILE";

    /**
     * Properties of entity TraceFile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property TraceLineFile_en = new Property(1, String.class, "traceLineFile_en", false, "TRACE_LINE_FILE_EN");
        public final static Property TraceLineFile_zh = new Property(2, String.class, "traceLineFile_zh", false, "TRACE_LINE_FILE_ZH");
        public final static Property FilePath = new Property(3, String.class, "filePath", false, "FILE_PATH");
        public final static Property Pixel = new Property(4, int.class, "pixel", false, "PIXEL");
        public final static Property Scan = new Property(5, int.class, "scan", false, "SCAN");
        public final static Property Size = new Property(6, int.class, "size", false, "SIZE");
        public final static Property Hub = new Property(7, int.class, "hub", false, "HUB");
        public final static Property ScanCount = new Property(8, int.class, "scanCount", false, "SCAN_COUNT");
        public final static Property FoldCount = new Property(9, int.class, "foldCount", false, "FOLD_COUNT");
        public final static Property ModuleWidth = new Property(10, int.class, "moduleWidth", false, "MODULE_WIDTH");
        public final static Property ModuleHeight = new Property(11, int.class, "moduleHeight", false, "MODULE_HEIGHT");
        public final static Property RGBCount = new Property(12, int.class, "RGBCount", false, "RGBCOUNT");
        public final static Property DotCount = new Property(13, int.class, "dotCount", false, "DOT_COUNT");
    }

    private final FileConverter filePathConverter = new FileConverter();

    public TraceFileDao(DaoConfig config) {
        super(config);
    }
    
    public TraceFileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRACE_FILE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"TRACE_LINE_FILE_EN\" TEXT," + // 1: traceLineFile_en
                "\"TRACE_LINE_FILE_ZH\" TEXT," + // 2: traceLineFile_zh
                "\"FILE_PATH\" TEXT," + // 3: filePath
                "\"PIXEL\" INTEGER NOT NULL ," + // 4: pixel
                "\"SCAN\" INTEGER NOT NULL ," + // 5: scan
                "\"SIZE\" INTEGER NOT NULL ," + // 6: size
                "\"HUB\" INTEGER NOT NULL ," + // 7: hub
                "\"SCAN_COUNT\" INTEGER NOT NULL ," + // 8: scanCount
                "\"FOLD_COUNT\" INTEGER NOT NULL ," + // 9: foldCount
                "\"MODULE_WIDTH\" INTEGER NOT NULL ," + // 10: moduleWidth
                "\"MODULE_HEIGHT\" INTEGER NOT NULL ," + // 11: moduleHeight
                "\"RGBCOUNT\" INTEGER NOT NULL ," + // 12: RGBCount
                "\"DOT_COUNT\" INTEGER NOT NULL );"); // 13: dotCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRACE_FILE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TraceFile entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String traceLineFile_en = entity.getTraceLineFile_en();
        if (traceLineFile_en != null) {
            stmt.bindString(2, traceLineFile_en);
        }
 
        String traceLineFile_zh = entity.getTraceLineFile_zh();
        if (traceLineFile_zh != null) {
            stmt.bindString(3, traceLineFile_zh);
        }
 
        File filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(4, filePathConverter.convertToDatabaseValue(filePath));
        }
        stmt.bindLong(5, entity.getPixel());
        stmt.bindLong(6, entity.getScan());
        stmt.bindLong(7, entity.getSize());
        stmt.bindLong(8, entity.getHub());
        stmt.bindLong(9, entity.getScanCount());
        stmt.bindLong(10, entity.getFoldCount());
        stmt.bindLong(11, entity.getModuleWidth());
        stmt.bindLong(12, entity.getModuleHeight());
        stmt.bindLong(13, entity.getRGBCount());
        stmt.bindLong(14, entity.getDotCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TraceFile entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String traceLineFile_en = entity.getTraceLineFile_en();
        if (traceLineFile_en != null) {
            stmt.bindString(2, traceLineFile_en);
        }
 
        String traceLineFile_zh = entity.getTraceLineFile_zh();
        if (traceLineFile_zh != null) {
            stmt.bindString(3, traceLineFile_zh);
        }
 
        File filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(4, filePathConverter.convertToDatabaseValue(filePath));
        }
        stmt.bindLong(5, entity.getPixel());
        stmt.bindLong(6, entity.getScan());
        stmt.bindLong(7, entity.getSize());
        stmt.bindLong(8, entity.getHub());
        stmt.bindLong(9, entity.getScanCount());
        stmt.bindLong(10, entity.getFoldCount());
        stmt.bindLong(11, entity.getModuleWidth());
        stmt.bindLong(12, entity.getModuleHeight());
        stmt.bindLong(13, entity.getRGBCount());
        stmt.bindLong(14, entity.getDotCount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public TraceFile readEntity(Cursor cursor, int offset) {
        TraceFile entity = new TraceFile( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // traceLineFile_en
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // traceLineFile_zh
            cursor.isNull(offset + 3) ? null : filePathConverter.convertToEntityProperty(cursor.getString(offset + 3)), // filePath
            cursor.getInt(offset + 4), // pixel
            cursor.getInt(offset + 5), // scan
            cursor.getInt(offset + 6), // size
            cursor.getInt(offset + 7), // hub
            cursor.getInt(offset + 8), // scanCount
            cursor.getInt(offset + 9), // foldCount
            cursor.getInt(offset + 10), // moduleWidth
            cursor.getInt(offset + 11), // moduleHeight
            cursor.getInt(offset + 12), // RGBCount
            cursor.getInt(offset + 13) // dotCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TraceFile entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTraceLineFile_en(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTraceLineFile_zh(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFilePath(cursor.isNull(offset + 3) ? null : filePathConverter.convertToEntityProperty(cursor.getString(offset + 3)));
        entity.setPixel(cursor.getInt(offset + 4));
        entity.setScan(cursor.getInt(offset + 5));
        entity.setSize(cursor.getInt(offset + 6));
        entity.setHub(cursor.getInt(offset + 7));
        entity.setScanCount(cursor.getInt(offset + 8));
        entity.setFoldCount(cursor.getInt(offset + 9));
        entity.setModuleWidth(cursor.getInt(offset + 10));
        entity.setModuleHeight(cursor.getInt(offset + 11));
        entity.setRGBCount(cursor.getInt(offset + 12));
        entity.setDotCount(cursor.getInt(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TraceFile entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TraceFile entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TraceFile entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
